"""
envoy helpers
"""
load("/google/protobuf/duration.proto", "Duration")
load("//xds/lib.pinc", "xds")


def main():
    return {
        "ratelimit": xds.Snapshot(
            xds.RateLimit(
                "rl",
                xds.AddDescriptor(
                    "category",
                    "account",
                    xds.PerMinute(4, xds.Replaces("fake_name", "bkthomps"),),
                ),
                xds.AddDescriptor(
                    "source_cluster",
                    "proxy",
                    xds.AddDescriptor(
                        "destination_cluster",
                        "bkthompsa",
                        xds.PerMinute(2, xds.Replaces("bkthomps")),
                    ),
                    xds.AddDescriptor("destination_cluster", "mock", xds.PerMinute(1)),
                    xds.AddDescriptor(
                        "destination_cluster",
                        "override",
                        xds.PerMinute(2, xds.Replaces("banned_limit")),
                    ),
                    xds.AddDescriptor(
                        "destination_cluster",
                        "fake",
                        xds.PerMinute(2, xds.WithName("fake_name")),
                    ),
                ),
                xds.AddDescriptor(
                    "foo",
                    "",
                    xds.PerMinute(2),
                    xds.AddDescriptor("bar", "", xds.PerMinute(3)),
                    xds.AddDescriptor(
                        "bar", "bkthomps", xds.PerMinute(1, xds.WithName("bkthomps"))
                    ),
                    xds.AddDescriptor(
                        "bar", "banned", xds.PerMinute(0, xds.WithName("banned_limit"))
                    ),
                ),
            )
        ),
        "mock": xds.Snapshot(
            xds.VirtualHost(
                "default",
                xds.Domains("*"),
                xds.DirectResponse("Hello World!\n", xds.IfPrefix("/")),
            ),
            xds.Listener(
                "default",
                xds.WithTCP("0.0.0.0", 9999),
                xds.WithRdsHTTPRoute("default"),
            ),
        ),
        "proxy": xds.Snapshot(
            xds.Cluster(
                "mock",
                xds.RoundRobin,
                xds.StrictDNS,
                xds.WithEndpoint("envoy-mock", 9999),
                xds.WithConnectTimeout(Duration(seconds=1)),
            ),
            xds.Cluster(
                "ratelimit",
                xds.RoundRobin,
                xds.StrictDNS,
                xds.WithEndpoint("ratelimit", 8081),
                xds.WithConnectTimeout(Duration(seconds=1)),
            ),
            xds.Listener(
                "default",
                xds.WithTCP("0.0.0.0", 8888),
                xds.WithRdsHTTPRoute("backend", xds.WithRateLimitDomain("rl")),
            ),
            xds.VirtualHost(
                "backend",
                xds.Domains("*"),
                xds.DirectResponse("Hello World!", xds.IfPrefix("/hello")),
                xds.ToCluster("mock", xds.IfPrefix("/test")),
                xds.ToCluster(
                    "mock",
                    xds.IfPrefix("/header"),
                    xds.SetRouteRateLimitKeyHeader(foo="foo"),
                ),
                xds.ToCluster(
                    "mock",
                    xds.IfPrefix("/twoheader"),
                    xds.SetRouteRateLimitKeyHeader(foo="foo", bar="bar"),
                    xds.SetRouteRateLimitKeyHeader(foo="foo", bar="bar"),
                ),
                xds.ToCluster(
                    "mock",
                    xds.IfPrefix("/fourheader"),
                    xds.SetRouteRateLimitKeyHeader(foo="foo", bar="bar"),
                    xds.SetRouteRateLimitKeyHeader(
                        source_cluster="source_cluster",
                        destination_cluster="destination_cluster",
                    ),
                ),
                xds.ToCluster(
                    "mock",
                    xds.IfPrefix("/fiveheader"),
                    xds.SetRouteRateLimitKeyHeader(foo="foo", bar="bar"),
                    xds.SetRouteRateLimitKeyHeader(
                        source_cluster="source_cluster",
                        destination_cluster="destination_cluster",
                    ),
                    xds.SetRouteRateLimitKeyHeader(category="category"),
                ),
                xds.ToCluster(
                    "mock",
                    xds.IfPrefix("/unspec"),
                    xds.SetRouteRateLimitKeyHeader(unspec="unspec"),
                ),
            ),
        ),
    }
