load("chain.pinc", "Chain")
load("//example/wellknown.pinc", "wellknown")
load("@envoy//envoy/config/listener/v3/listener.proto", ListenerProto="Listener")
load("@envoy//envoy/config/core/v3/address.proto", "Address", "SocketAddress")
load(
    "@envoy//envoy/config/listener/v3/listener_components.proto",
    "FilterChain",
    "Filter",
)
load("@envoy//envoy/extensions/filters/http/router/v3/router.proto", "Router")
load(
    "@envoy//envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto",
    "HttpConnectionManager",
    "Rds",
    "HttpFilter",
)
load(
    "@envoy//envoy/config/core/v3/config_source.proto",
    "ConfigSource",
    "ApiConfigSource",
    "ApiVersion",
)
load("@envoy//envoy/config/core/v3/grpc_service.proto", "GrpcService")
load("@envoy//envoy/extensions/filters/http/ratelimit/v3/rate_limit.proto", "RateLimit")
load("@envoy//envoy/config/ratelimit/v3/rls.proto", "RateLimitServiceConfig")
load("any.star", "any")


def Listener(name, *hooks):
    def listener(snapshot, next):
        if not snapshot.listeners:
            snapshot.listeners = []
        snapshot.listeners.append(Chain(ListenerProto(name=name), *hooks))
        return next(snapshot)

    return listener


def WithTCP(address, port):
    def tcp_listener(listener, next):
        listener.address = Address(
            socket_address=SocketAddress(
                protocol=SocketAddress.Protocol.TCP, address=address, port_value=port
            )
        )
        return next(listener)

    return tcp_listener


def WithRdsHTTPRoute(name, *hooks):
    routerConfig = any.new(Router())
    # HTTP filter configuration
    manager = Chain(
        HttpConnectionManager(
            codec_type=HttpConnectionManager.CodecType.AUTO,
            stat_prefix="http",
            rds=Rds(config_source=makeConfigSource(), route_config_name=name,),
            http_filters=[],
        ),
        *hooks
    )
    manager.http_filters.append(
        HttpFilter(name=wellknown.Router, typed_config=routerConfig,)
    )

    def http_router(listener, next):
        if not listener.filter_chains:
            listener.filter_chains = []
        listener.filter_chains.append(
            FilterChain(
                filters=[
                    Filter(
                        name=wellknown.HTTPConnectionManager,
                        typed_config=any.new(manager),
                    )
                ]
            )
        )
        return next(listener)

    return http_router


def WithRateLimitDomain(domain, cluster_name="ratelimit"):
    def rate_limit(manager, next):
        manager.http_filters.append(
            HttpFilter(
                name=wellknown.HTTPRateLimit,
                typed_config=any.new(
                    RateLimit(
                        domain=domain,
                        stage=0,
                        request_type="external",
                        rate_limited_as_resource_exhausted=True,
                        failure_mode_deny=False,
                        enable_x_ratelimit_headers=RateLimit.XRateLimitHeadersRFCVersion.DRAFT_VERSION_03,
                        rate_limit_service=RateLimitServiceConfig(
                            grpc_service=GrpcService(
                                envoy_grpc=GrpcService.EnvoyGrpc(
                                    cluster_name=cluster_name,
                                )
                            ),
                            transport_api_version=ApiVersion.V3,
                        ),
                    )
                    # {
                    #     "domain": domain,
                    #     "stage": 0,
                    #     "timeout": "10s",
                    #     "failure_mode_deny": False,
                    #     "rate_limited_as_resource_exhausted": False,
                    #     "disable_key": False,
                    #     "filters": [
                    #         {
                    #             "type": "local_rate_limit",
                    #             "config": {
                    #                 "stat_prefix": "local_rate_limiter",
                    #                 "token_bucket": {
                    #                     "max_tokens": 1,
                    #                     "tokens_per_fill": 1,
                    #                     "fill_interval": {"seconds": 1},
                    #                 },
                    #             },
                    #         }
                    #     ],
                    # }
                ),
            )
        )
        return next(manager)

    return rate_limit


def makeConfigSource():
    source = ConfigSource(
        resource_api_version=ApiVersion.V3,
        api_config_source=ApiConfigSource(
            transport_api_version=ApiVersion.V3,
            api_type=ApiConfigSource.ApiType.GRPC,
            set_node_on_first_message_only=True,
            grpc_services=[
                GrpcService(
                    envoy_grpc=GrpcService.EnvoyGrpc(cluster_name="xds_cluster")
                )
            ],
        ),
    )
    return source


def makeConfigSource():
    source = ConfigSource(
        resource_api_version=ApiVersion.V3,
        api_config_source=ApiConfigSource(
            transport_api_version=ApiVersion.V3,
            api_type=ApiConfigSource.ApiType.GRPC,
            set_node_on_first_message_only=True,
            grpc_services=[
                GrpcService(
                    envoy_grpc=GrpcService.EnvoyGrpc(cluster_name="xds_cluster")
                )
            ],
        ),
    )
    return source
